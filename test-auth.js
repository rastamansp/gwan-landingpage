const fetch = require('node-fetch');

async function testAuth() {
  console.log('üß™ Testando autentica√ß√£o...\n');

  try {
    // 1. Registrar usu√°rio
    console.log('1Ô∏è‚É£ Registrando usu√°rio...');
    const registerResponse = await fetch('http://localhost:3001/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: 'Test User',
        email: 'test@example.com',
        phone: '+5511999999999'
      })
    });

    const registerData = await registerResponse.json();
    console.log('‚úÖ Registro:', registerData);

    if (!registerData.success) {
      throw new Error('Falha no registro');
    }

    // 2. Ativar usu√°rio
    console.log('\n2Ô∏è‚É£ Ativando usu√°rio...');
    const activateResponse = await fetch(`http://localhost:3001/auth/activate/${registerData.userId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        activationCode: registerData.activationCode
      })
    });

    const activateData = await activateResponse.json();
    console.log('‚úÖ Ativa√ß√£o:', activateData);

    if (!activateData.success) {
      throw new Error('Falha na ativa√ß√£o');
    }

    const token = activateData.token;
    console.log('üîë Token gerado:', token.substring(0, 50) + '...');

    // 3. Testar endpoint protegido
    console.log('\n3Ô∏è‚É£ Testando endpoint protegido...');
    const meResponse = await fetch('http://localhost:3001/auth/me', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });

    const meData = await meResponse.json();
    console.log('‚úÖ Endpoint /me:', meData);

    if (!meData.success) {
      throw new Error('Falha na autentica√ß√£o');
    }

    // 4. Testar upload (simulado)
    console.log('\n4Ô∏è‚É£ Testando upload...');
    const uploadResponse = await fetch('http://localhost:3001/upload', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });

    console.log('üì§ Upload status:', uploadResponse.status);
    
    if (uploadResponse.status === 401) {
      console.log('‚ùå Upload falhou - Token inv√°lido');
    } else {
      console.log('‚úÖ Upload funcionando');
    }

    console.log('\nüéâ Teste conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

// Aguardar um pouco para o servidor inicializar
setTimeout(testAuth, 3000); 